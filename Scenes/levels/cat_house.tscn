[gd_scene load_steps=19 format=4 uid="uid://chnfqw7f71k5s"]

[ext_resource type="TileSet" uid="uid://be65eo2fvqoya" path="res://Scenes/resources/level.tres" id="1_af7nr"]
[ext_resource type="Texture2D" uid="uid://5am2g2u4e3ua" path="res://assets/shaders/particle2.png" id="1_lwisy"]
[ext_resource type="Shader" uid="uid://h4mfnmtdpf3h" path="res://assets/shaders/blending_modes.gdshader" id="3_e21xk"]
[ext_resource type="PackedScene" uid="uid://c0gy6p2pmqu2s" path="res://Scenes/Attack/debug_character.tscn" id="3_wkhqo"]
[ext_resource type="Script" uid="uid://ff437aw6r0ax" path="res://Scripts/transition/to_village_3.gd" id="4_2rpj3"]
[ext_resource type="Texture2D" uid="uid://srp1d0cejnnc" path="res://assets/character_art/original/elena_bf.png" id="6_rf67q"]

[sub_resource type="CanvasItemMaterial" id="CanvasItemMaterial_wkhqo"]
light_mode = 1

[sub_resource type="Curve" id="Curve_2rpj3"]
_data = [Vector2(0.203488, 0.101124), 0.0, 0.0, 0, 0, Vector2(0.331395, 1), 0.0, 0.0, 0, 0, Vector2(0.848837, 1), 0.0, 0.0, 0, 0, Vector2(0.953488, 0.52809), 0.0, 0.0, 0, 0, Vector2(1, 0.0561798), 0.0, 0.0, 0, 0]
point_count = 5

[sub_resource type="CurveTexture" id="CurveTexture_8e7qo"]
curve = SubResource("Curve_2rpj3")

[sub_resource type="Gradient" id="Gradient_e21xk"]

[sub_resource type="GradientTexture1D" id="GradientTexture1D_rf67q"]
gradient = SubResource("Gradient_e21xk")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_a4imh"]
particle_flag_disable_z = true
emission_shape = 3
emission_box_extents = Vector3(2600, 1800, 1)
spread = 89.554
initial_velocity_min = 5.0
initial_velocity_max = 10.0
gravity = Vector3(0, 0, 0)
damping_max = 10.843
scale_min = 0.1
color_ramp = SubResource("GradientTexture1D_rf67q")
alpha_curve = SubResource("CurveTexture_8e7qo")

[sub_resource type="Shader" id="Shader_af7nr"]
code = "shader_type canvas_item;
// BLENDING MODES
vec3 multiply(vec3 base, vec3 blend) {
    return base * blend;
}
vec3 screen(vec3 base, vec3 blend) {
    return 1.0 - (1.0 - base) * (1.0 - blend);
}
vec3 darken(vec3 base, vec3 blend) {
    return min(base, blend);
}
vec3 lighten(vec3 base, vec3 blend) {
    return max(base, blend);
}
vec3 difference(vec3 base, vec3 blend) {
    return abs(base - blend);
}
vec3 exclusion(vec3 base, vec3 blend) {
    return base + blend - 2.0 * base * blend;
}
vec3 overlay(vec3 base, vec3 blend) {
    vec3 limit = step(0.5, base);
    return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), limit);
}
vec3 hard_light(vec3 base, vec3 blend) {
    vec3 limit = step(0.5, blend);
    return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), limit);
}
vec3 soft_light(vec3 base, vec3 blend) {
    vec3 limit = step(0.5, blend);
    return mix(2.0 * base * blend + base * base * (1.0 - 2.0 * blend), sqrt(base) * (2.0 * blend - 1.0) + (2.0 * base) * (1.0 - blend), limit);
}
vec3 color_dodge(vec3 base, vec3 blend) {
    return base / (1.0 - blend);
}
vec3 linear_dodge(vec3 base, vec3 blend) {
    return base + blend;
}
vec3 color_burn(vec3 base, vec3 blend) {
    return 1.0 - (1.0 - base) / blend;
}
vec3 linear_burn(vec3 base, vec3 blend) {
    return base + blend - 1.0;
}

//thank u claude pentru photoshop math functions

// Converts RGB to HSL
vec3 rgb_to_hsl(vec3 color) {
    float maxColor = max(max(color.r, color.g), color.b);
    float minColor = min(min(color.r, color.g), color.b);
    float delta = maxColor - minColor;
    
    float h = 0.0;
    float s = 0.0;
    float l = (maxColor + minColor) / 2.0;
    
    if (delta > 0.0) {
        s = l < 0.5 ? delta / (maxColor + minColor) : delta / (2.0 - maxColor - minColor);
        
        if (maxColor == color.r) {
            h = (color.g - color.b) / delta + (color.g < color.b ? 6.0 : 0.0);
        } else if (maxColor == color.g) {
            h = (color.b - color.r) / delta + 2.0;
        } else {
            h = (color.r - color.g) / delta + 4.0;
        }
        h /= 6.0;
    }
    
    return vec3(h, s, l);
}

// Function to help with HSL to RGB conversion
float hue_to_rgb(float p, float q, float t) {
    if (t < 0.0) t += 1.0;
    if (t > 1.0) t -= 1.0;
    if (t < 1.0/6.0) return p + (q - p) * 6.0 * t;
    if (t < 1.0/2.0) return q;
    if (t < 2.0/3.0) return p + (q - p) * (2.0/3.0 - t) * 6.0;
    return p;
}

// Converts HSL to RGB
vec3 hsl_to_rgb(vec3 hsl) {
    float h = hsl.x;
    float s = hsl.y;
    float l = hsl.z;
    
    float r, g, b;
    
    if (s == 0.0) {
        r = g = b = l; // Achromatic
    } else {
        float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;
        float p = 2.0 * l - q;
        r = hue_to_rgb(p, q, h + 1.0/3.0);
        g = hue_to_rgb(p, q, h);
        b = hue_to_rgb(p, q, h - 1.0/3.0);
    }
    
    return vec3(r, g, b);
}

// Photoshop/Krita Color mode - takes hue and saturation from blend layer, luminance from base layer
vec3 ps_color(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take hue and saturation from blend, luminance from base
    return hsl_to_rgb(vec3(blend_hsl.x, blend_hsl.y, base_hsl.z));
}

// Hue mode - takes hue from blend layer, saturation and luminance from base
vec3 ps_hue(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take hue from blend, saturation and luminance from base
    return hsl_to_rgb(vec3(blend_hsl.x, base_hsl.y, base_hsl.z));
}

// Saturation mode - takes saturation from blend layer, hue and luminance from base
vec3 ps_saturation(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take saturation from blend, hue and luminance from base
    return hsl_to_rgb(vec3(base_hsl.x, blend_hsl.y, base_hsl.z));
}

// Luminosity mode - takes luminance from blend layer, hue and saturation from base
vec3 ps_luminosity(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take luminance from blend, hue and saturation from base
    return hsl_to_rgb(vec3(base_hsl.x, base_hsl.y, blend_hsl.z));
}

// Grayscale/Black and White conversion - different methods available
vec3 grayscale_average(vec3 color) {
    float gray = (color.r + color.g + color.b) / 3.0;
    return vec3(gray);
}

vec3 grayscale_luminance(vec3 color) {
    // Human eye perceives green as brighter than red, and red as brighter than blue
    float gray = dot(color, vec3(0.299, 0.587, 0.114));
    return vec3(gray);
}

vec3 grayscale_lightness(vec3 color) {
    float gray = (max(max(color.r, color.g), color.b) + min(min(color.r, color.g), color.b)) / 2.0;
    return vec3(gray);
}

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform vec4 tint : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float opacity : hint_range(0.0, 1.0) = 1.0;
uniform int blend_mode : hint_enum(\"Normal\", \"Multiply\", \"Screen\", \"Darken\", \"Lighten\", \"Difference\", \"Exclusion\", \"Overlay\", \"Hard Light\", \"Soft Light\", \"Color Dodge\", \"Linear Dodge\", \"Color Burn\", \"Linear Burn\",
							\"Color\", \"Hue\", \"Saturation\", \"Luminosity\", \"Grayscale avg\", \"Grayscale Luminance\", \"Grayscale Lightness\") = 0;

void fragment() {
    // Get the color behind our ColorRect (the base layer)
    vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
    
    // Our blend layer is the ColorRect with the tint applied
    vec3 blend_color = tint.rgb;
    
    // Apply the selected blending mode
    vec3 result;
    
    if (blend_mode == 0) {
        result = mix(screen_color.rgb, blend_color, opacity);
    } else if (blend_mode == 1) {
        result = mix(screen_color.rgb, multiply(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 2) {
        result = mix(screen_color.rgb, screen(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 3) {
        result = mix(screen_color.rgb, darken(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 4) {
        result = mix(screen_color.rgb, lighten(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 5) {
        result = mix(screen_color.rgb, difference(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 6) {
        result = mix(screen_color.rgb, exclusion(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 7) {
        result = mix(screen_color.rgb, overlay(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 8) {
        result = mix(screen_color.rgb, hard_light(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 9) {
        result = mix(screen_color.rgb, soft_light(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 10) {
        result = mix(screen_color.rgb, color_dodge(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 11) {
        result = mix(screen_color.rgb, linear_dodge(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 12) {
        result = mix(screen_color.rgb, color_burn(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 13) {
		result = mix(screen_color.rgb, ps_color(screen_color.rgb, blend_color), opacity);
    }else if (blend_mode == 14) {
		result = mix(screen_color.rgb, ps_hue(screen_color.rgb, blend_color), opacity);
	}else if (blend_mode == 15) {
		result = mix(screen_color.rgb, ps_saturation(screen_color.rgb, blend_color), opacity);
	}
	else if (blend_mode == 16) {
		result = mix(screen_color.rgb, ps_luminosity(screen_color.rgb, blend_color), opacity);
	}else if (blend_mode == 17) {
		result = grayscale_average(screen_color.rgb);
	}else if (blend_mode == 18) {
		result = grayscale_luminance(screen_color.rgb);
	}else if (blend_mode == 19) {
		result = grayscale_lightness(screen_color.rgb);
	}
    
    // Final output
    COLOR = vec4(result, screen_color.a * tint.a);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_lwisy"]
shader = SubResource("Shader_af7nr")
shader_parameter/tint = Color(0.129643, 0.054928, 0.205495, 1)
shader_parameter/opacity = 0.671
shader_parameter/blend_mode = 3

[sub_resource type="Shader" id="Shader_2rpj3"]
code = "shader_type canvas_item;
// BLENDING MODES
vec3 multiply(vec3 base, vec3 blend) {
    return base * blend;
}
vec3 screen(vec3 base, vec3 blend) {
    return 1.0 - (1.0 - base) * (1.0 - blend);
}
vec3 darken(vec3 base, vec3 blend) {
    return min(base, blend);
}
vec3 lighten(vec3 base, vec3 blend) {
    return max(base, blend);
}
vec3 difference(vec3 base, vec3 blend) {
    return abs(base - blend);
}
vec3 exclusion(vec3 base, vec3 blend) {
    return base + blend - 2.0 * base * blend;
}
vec3 overlay(vec3 base, vec3 blend) {
    vec3 limit = step(0.5, base);
    return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), limit);
}
vec3 hard_light(vec3 base, vec3 blend) {
    vec3 limit = step(0.5, blend);
    return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), limit);
}
vec3 soft_light(vec3 base, vec3 blend) {
    vec3 limit = step(0.5, blend);
    return mix(2.0 * base * blend + base * base * (1.0 - 2.0 * blend), sqrt(base) * (2.0 * blend - 1.0) + (2.0 * base) * (1.0 - blend), limit);
}
vec3 color_dodge(vec3 base, vec3 blend) {
    return base / (1.0 - blend);
}
vec3 linear_dodge(vec3 base, vec3 blend) {
    return base + blend;
}
vec3 color_burn(vec3 base, vec3 blend) {
    return 1.0 - (1.0 - base) / blend;
}
vec3 linear_burn(vec3 base, vec3 blend) {
    return base + blend - 1.0;
}

//thank u claude pentru photoshop math functions

// Converts RGB to HSL
vec3 rgb_to_hsl(vec3 color) {
    float maxColor = max(max(color.r, color.g), color.b);
    float minColor = min(min(color.r, color.g), color.b);
    float delta = maxColor - minColor;
    
    float h = 0.0;
    float s = 0.0;
    float l = (maxColor + minColor) / 2.0;
    
    if (delta > 0.0) {
        s = l < 0.5 ? delta / (maxColor + minColor) : delta / (2.0 - maxColor - minColor);
        
        if (maxColor == color.r) {
            h = (color.g - color.b) / delta + (color.g < color.b ? 6.0 : 0.0);
        } else if (maxColor == color.g) {
            h = (color.b - color.r) / delta + 2.0;
        } else {
            h = (color.r - color.g) / delta + 4.0;
        }
        h /= 6.0;
    }
    
    return vec3(h, s, l);
}

// Function to help with HSL to RGB conversion
float hue_to_rgb(float p, float q, float t) {
    if (t < 0.0) t += 1.0;
    if (t > 1.0) t -= 1.0;
    if (t < 1.0/6.0) return p + (q - p) * 6.0 * t;
    if (t < 1.0/2.0) return q;
    if (t < 2.0/3.0) return p + (q - p) * (2.0/3.0 - t) * 6.0;
    return p;
}

// Converts HSL to RGB
vec3 hsl_to_rgb(vec3 hsl) {
    float h = hsl.x;
    float s = hsl.y;
    float l = hsl.z;
    
    float r, g, b;
    
    if (s == 0.0) {
        r = g = b = l; // Achromatic
    } else {
        float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;
        float p = 2.0 * l - q;
        r = hue_to_rgb(p, q, h + 1.0/3.0);
        g = hue_to_rgb(p, q, h);
        b = hue_to_rgb(p, q, h - 1.0/3.0);
    }
    
    return vec3(r, g, b);
}

// Photoshop/Krita Color mode - takes hue and saturation from blend layer, luminance from base layer
vec3 ps_color(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take hue and saturation from blend, luminance from base
    return hsl_to_rgb(vec3(blend_hsl.x, blend_hsl.y, base_hsl.z));
}

// Hue mode - takes hue from blend layer, saturation and luminance from base
vec3 ps_hue(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take hue from blend, saturation and luminance from base
    return hsl_to_rgb(vec3(blend_hsl.x, base_hsl.y, base_hsl.z));
}

// Saturation mode - takes saturation from blend layer, hue and luminance from base
vec3 ps_saturation(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take saturation from blend, hue and luminance from base
    return hsl_to_rgb(vec3(base_hsl.x, blend_hsl.y, base_hsl.z));
}

// Luminosity mode - takes luminance from blend layer, hue and saturation from base
vec3 ps_luminosity(vec3 base, vec3 blend) {
    vec3 base_hsl = rgb_to_hsl(base);
    vec3 blend_hsl = rgb_to_hsl(blend);
    
    // Take luminance from blend, hue and saturation from base
    return hsl_to_rgb(vec3(base_hsl.x, base_hsl.y, blend_hsl.z));
}

// Grayscale/Black and White conversion - different methods available
vec3 grayscale_average(vec3 color) {
    float gray = (color.r + color.g + color.b) / 3.0;
    return vec3(gray);
}

vec3 grayscale_luminance(vec3 color) {
    // Human eye perceives green as brighter than red, and red as brighter than blue
    float gray = dot(color, vec3(0.299, 0.587, 0.114));
    return vec3(gray);
}

vec3 grayscale_lightness(vec3 color) {
    float gray = (max(max(color.r, color.g), color.b) + min(min(color.r, color.g), color.b)) / 2.0;
    return vec3(gray);
}

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform vec4 tint : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float opacity : hint_range(0.0, 1.0) = 1.0;
uniform int blend_mode : hint_enum(\"Normal\", \"Multiply\", \"Screen\", \"Darken\", \"Lighten\", \"Difference\", \"Exclusion\", \"Overlay\", \"Hard Light\", \"Soft Light\", \"Color Dodge\", \"Linear Dodge\", \"Color Burn\", \"Linear Burn\",
							\"Color\", \"Hue\", \"Saturation\", \"Luminosity\", \"Grayscale avg\", \"Grayscale Luminance\", \"Grayscale Lightness\") = 0;

void fragment() {
    // Get the color behind our ColorRect (the base layer)
    vec4 screen_color = texture(SCREEN_TEXTURE, SCREEN_UV);
    
    // Our blend layer is the ColorRect with the tint applied
    vec3 blend_color = tint.rgb;
    
    // Apply the selected blending mode
    vec3 result;
    
    if (blend_mode == 0) {
        result = mix(screen_color.rgb, blend_color, opacity);
    } else if (blend_mode == 1) {
        result = mix(screen_color.rgb, multiply(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 2) {
        result = mix(screen_color.rgb, screen(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 3) {
        result = mix(screen_color.rgb, darken(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 4) {
        result = mix(screen_color.rgb, lighten(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 5) {
        result = mix(screen_color.rgb, difference(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 6) {
        result = mix(screen_color.rgb, exclusion(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 7) {
        result = mix(screen_color.rgb, overlay(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 8) {
        result = mix(screen_color.rgb, hard_light(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 9) {
        result = mix(screen_color.rgb, soft_light(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 10) {
        result = mix(screen_color.rgb, color_dodge(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 11) {
        result = mix(screen_color.rgb, linear_dodge(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 12) {
        result = mix(screen_color.rgb, color_burn(screen_color.rgb, blend_color), opacity);
    } else if (blend_mode == 13) {
		result = mix(screen_color.rgb, ps_color(screen_color.rgb, blend_color), opacity);
    }else if (blend_mode == 14) {
		result = mix(screen_color.rgb, ps_hue(screen_color.rgb, blend_color), opacity);
	}else if (blend_mode == 15) {
		result = mix(screen_color.rgb, ps_saturation(screen_color.rgb, blend_color), opacity);
	}
	else if (blend_mode == 16) {
		result = mix(screen_color.rgb, ps_luminosity(screen_color.rgb, blend_color), opacity);
	}else if (blend_mode == 17) {
		result = grayscale_average(screen_color.rgb);
	}else if (blend_mode == 18) {
		result = grayscale_luminance(screen_color.rgb);
	}else if (blend_mode == 19) {
		result = grayscale_lightness(screen_color.rgb);
	}
    
    // Final output
    COLOR = vec4(result, screen_color.a * tint.a);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8e7qo"]
shader = SubResource("Shader_2rpj3")
shader_parameter/tint = Color(0.34913, 0.173148, 0.30305, 1)
shader_parameter/opacity = 0.715
shader_parameter/blend_mode = 3

[sub_resource type="ShaderMaterial" id="ShaderMaterial_a4imh"]
shader = ExtResource("3_e21xk")
shader_parameter/tint = Color(0.119522, 2.85415e-05, 0.456915, 1)
shader_parameter/opacity = 0.541
shader_parameter/blend_mode = 1

[sub_resource type="RectangleShape2D" id="RectangleShape2D_wkhqo"]
size = Vector2(20, 13)

[node name="CatHouse" type="Node2D"]

[node name="ColorRect2" type="ColorRect" parent="."]
z_index = -2
texture_filter = 1
offset_left = -1454.0
offset_top = -928.0
offset_right = 2517.0
offset_bottom = 2416.0
color = Color(0, 0, 0, 1)

[node name="GPUParticles2D2" type="GPUParticles2D" parent="."]
material = SubResource("CanvasItemMaterial_wkhqo")
position = Vector2(1006, 1103)
amount = 1013
texture = ExtResource("1_lwisy")
lifetime = 6.0
randomness = 0.45
visibility_rect = Rect2(-1250, -1500, 500, 500)
process_material = SubResource("ParticleProcessMaterial_a4imh")

[node name="Node2D" type="Node2D" parent="."]
metadata/_edit_lock_ = true

[node name="ground" type="TileMapLayer" parent="Node2D"]
texture_filter = 1
tile_map_data = PackedByteArray("AAAUAAAATwACAAYAAAAVAAAATwADAAYAAAAUAAEATwACAAYAAAAVAAEATwADAAYAAAAUAAIATwACAAYAAAAVAAIATwADAAYAAAAUAAMATwACAAYAAAAVAAMATwADAAYAAAAUAAQATwACAAYAAAAVAAQATwADAAYAAAAUAAUATwACAAYAAAAVAAUATwADAAYAAAAUAAYATwACAAYAAAAVAAYATwADAAYAAAAUAAcATwACAAYAAAAVAAcATwADAAYAAAAUAAgATwACAAYAAAAVAAgATwADAAYAAAAUAAkATwACAAYAAAAVAAkATwADAAYAAAAUAAoATwACAAYAAAAVAAoATwADAAYAAAAUAAsATwACAAYAAAAVAAsATwADAAYAAAAUAAwATwACAAYAAAAVAAwATwADAAYAAAAUAA0ATwACAAYAAAAVAA0ATwADAAYAAAAUAA4ATwACAAYAAAAVAA4ATwADAAYAAAAUAA8ATwACAAYAAAAVAA8ATwADAAYAAAAUABAATwACAAYAAAAVABAATwADAAYAAAAUABEATwACAAYAAAAVABEATwADAAYAAAAUABIATwACAAYAAAAVABIATwADAAYAAAAUABMATwACAAYAAAAVABMATwADAAYAAAAUABQATwACAAYAAAAVABQATwADAAYAAAAUABUATwACAAYAAAAVABUATwADAAYAAAAUABYATwACAAYAAAAVABYATwADAAYAAAAUABcATwACAAYAAAAVABcATwADAAYAAAAUABgATwACAAYAAAAVABgATwADAAYAAAAUABkATwACAAYAAAAVABkATwADAAYAAAAUABoATwACAAYAAAAVABoATwADAAYAAAAUABsATwACAAYAAAAVABsATwADAAYAAAAUABwATwACAAYAAAAVABwATwADAAYAAAAUAB0ATwACAAYAAAAVAB0ATwADAAYAAAAUAB4ATwACAAYAAAAVAB4ATwADAAYAAAAUAB8ATwACAAYAAAAVAB8ATwADAAYAAAAUACAATwACAAYAAAAVACAATwADAAYAAAAUACEATwACAAYAAAAVACEATwADAAYAAAAUACIATwACAAYAAAAVACIATwADAAYAAAAUACMATwACAAYAAAAVACMATwADAAYAAAAUACQATwACAAYAAAAVACQATwADAAYAAAAUACUATwACAAYAAAAVACUATwADAAYAAAAUACYATwACAAYAAAAVACYATwADAAYAAAAUACcATwACAAYAAAAVACcATwADAAYAAAAUACgATwACAAYAAAAVACgATwADAAYAAAAUACkATwACAAYAAAAVACkATwADAAYAAAAWAAAATwACAAYAAAAXAAAATwADAAYAAAAWAAEATwACAAYAAAAXAAEATwADAAYAAAAWAAIATwACAAYAAAAXAAIATwADAAYAAAAWAAMATwACAAYAAAAXAAMATwADAAYAAAAWAAQATwACAAYAAAAXAAQATwADAAYAAAAWAAUATwACAAYAAAAXAAUATwADAAYAAAAWAAYATwACAAYAAAAXAAYATwADAAYAAAAWAAcATwACAAYAAAAXAAcATwADAAYAAAAWAAgATwACAAYAAAAXAAgATwADAAYAAAAWAAkATwACAAYAAAAXAAkATwADAAYAAAAWAAoATwACAAYAAAAXAAoATwADAAYAAAAWAAsATwACAAYAAAAXAAsATwADAAYAAAAWAAwATwACAAYAAAAXAAwATwADAAYAAAAWAA0ATwACAAYAAAAXAA0ATwADAAYAAAAWAA4ATwACAAYAAAAXAA4ATwADAAYAAAAWAA8ATwACAAYAAAAXAA8ATwADAAYAAAAWABAATwACAAYAAAAXABAATwADAAYAAAAWABEATwACAAYAAAAXABEATwADAAYAAAAWABIATwACAAYAAAAXABIATwADAAYAAAAWABMATwACAAYAAAAXABMATwADAAYAAAAWABQATwACAAYAAAAXABQATwADAAYAAAAWABUATwACAAYAAAAXABUATwADAAYAAAAWABYATwACAAYAAAAXABYATwADAAYAAAAWABcATwACAAYAAAAXABcATwADAAYAAAAWABgATwACAAYAAAAXABgATwADAAYAAAAWABkATwACAAYAAAAXABkATwADAAYAAAAWABoATwACAAYAAAAXABoATwADAAYAAAAWABsATwACAAYAAAAXABsATwADAAYAAAAWABwATwACAAYAAAAXABwATwADAAYAAAAWAB0ATwACAAYAAAAXAB0ATwADAAYAAAAWAB4ATwACAAYAAAAXAB4ATwADAAYAAAAWAB8ATwACAAYAAAAXAB8ATwADAAYAAAAWACAATwACAAYAAAAXACAATwADAAYAAAAWACEATwACAAYAAAAXACEATwADAAYAAAAWACIATwACAAYAAAAXACIATwADAAYAAAAWACMATwACAAYAAAAXACMATwADAAYAAAAWACQATwACAAYAAAAXACQATwADAAYAAAAWACUATwACAAYAAAAXACUATwADAAYAAAAWACYATwACAAYAAAAXACYATwADAAYAAAAWACcATwACAAYAAAAXACcATwADAAYAAAAWACgATwACAAYAAAAXACgATwADAAYAAAAWACkATwACAAYAAAAXACkATwADAAYAAAAYAAAATwACAAYAAAAZAAAATwADAAYAAAAYAAEATwACAAYAAAAZAAEATwADAAYAAAAYAAIATwACAAYAAAAZAAIATwADAAYAAAAYAAMATwACAAYAAAAZAAMATwADAAYAAAAYAAQATwACAAYAAAAZAAQATwADAAYAAAAYAAUATwACAAYAAAAZAAUATwADAAYAAAAYAAYATwACAAYAAAAZAAYATwADAAYAAAAYAAcATwACAAYAAAAZAAcATwADAAYAAAAYAAgATwACAAYAAAAZAAgATwADAAYAAAAYAAkATwACAAYAAAAZAAkATwADAAYAAAAYAAoATwACAAYAAAAZAAoATwADAAYAAAAYAAsATwACAAYAAAAZAAsATwADAAYAAAAYAAwATwACAAYAAAAZAAwATwADAAYAAAAYAA0ATwACAAYAAAAZAA0ATwADAAYAAAAYAA4ATwACAAYAAAAZAA4ATwADAAYAAAAYAA8ATwACAAYAAAAZAA8ATwADAAYAAAAYABAATwACAAYAAAAZABAATwADAAYAAAAYABEATwACAAYAAAAZABEATwADAAYAAAAYABIATwACAAYAAAAZABIATwADAAYAAAAYABMATwACAAYAAAAZABMATwADAAYAAAAYABQATwACAAYAAAAZABQATwADAAYAAAAYABUATwACAAYAAAAZABUATwADAAYAAAAYABYATwACAAYAAAAZABYATwADAAYAAAAYABcATwACAAYAAAAZABcATwADAAYAAAAYABgATwACAAYAAAAZABgATwADAAYAAAAYABkATwACAAYAAAAZABkATwADAAYAAAAYABoATwACAAYAAAAZABoATwADAAYAAAAYABsATwACAAYAAAAZABsATwADAAYAAAAYABwATwACAAYAAAAZABwATwADAAYAAAAYAB0ATwACAAYAAAAZAB0ATwADAAYAAAAYAB4ATwACAAYAAAAZAB4ATwADAAYAAAAYAB8ATwACAAYAAAAZAB8ATwADAAYAAAAYACAATwACAAYAAAAZACAATwADAAYAAAAYACEATwACAAYAAAAZACEATwADAAYAAAAYACIATwACAAYAAAAZACIATwADAAYAAAAYACMATwACAAYAAAAZACMATwADAAYAAAAYACQATwACAAYAAAAZACQATwADAAYAAAAYACUATwACAAYAAAAZACUATwADAAYAAAAYACYATwACAAYAAAAZACYATwADAAYAAAAYACcATwACAAYAAAAZACcATwADAAYAAAAYACgATwACAAYAAAAZACgATwADAAYAAAAYACkATwACAAYAAAAZACkATwADAAYAAAAUAP3/TwAJAAEAAAAUAP7/TwAJAAIAAAAVAP3/TwALAAEAAAAVAP7/TwAKAAMAAAAUAP//TwAJAAQAAAAVAP//TwAKAAQAAAAWAP3/TwALAAEAAAAWAP7/TwAKAAIAAAAWAP//TwAJAAQAAAAXAP7/TwAKAAIAAAAXAP//TwAKAAQAAAAXAP3/TwALAAEAAAAYAP3/TwALAAEAAAAYAP7/TwAKAAIAAAAYAP//TwALAAQAAAAZAP3/TwAMAAEAAAAZAP7/TwAMAAIAAAAZAP//TwAMAAQAAAAUAPz/TwAJAAAAAAAVAPz/TwAKAAAAAAAWAPz/TwAJAAAAAAAXAPz/TwAKAAAAAAAYAPz/TwALAAAAAAAZAPz/TwAMAAAAAAAaAPz/TwARAAAAAAATAPz/TwARAAAAABAaAP3/TwARAAEAAAATAP3/TwARAAEAABATAP7/TwARAAEAABATAP//TwARAAEAABAaAP7/TwARAAEAAAAaAP//TwARAAEAAAAUACoATwACAAYAAAAUACsATwACAAYAAAAUACwATwACAAYAAAAUAC0ATwACAAYAAAAUAC4ATwACAAYAAAAUAC8ATwACAAYAAAAUADAATwACAAYAAAAUADEATwACAAYAAAAUADIATwACAAYAAAAUADMATwACAAYAAAAUADQATwACAAYAAAAUADUATwACAAYAAAAUADYATwACAAYAAAAUADcATwACAAYAAAAUADgATwACAAYAAAAUADkATwACAAYAAAAUADoATwACAAYAAAAUADsATwACAAYAAAAUADwATwACAAYAAAAUAD0ATwACAAYAAAAUAD4ATwACAAYAAAAUAD8ATwACAAYAAAAUAEAATwACAAYAAAAUAEEATwACAAYAAAAUAEIATwACAAYAAAAUAEMATwACAAYAAAAUAEQATwACAAYAAAAUAEUATwACAAYAAAAUAEYATwACAAYAAAAUAEcATwACAAYAAAAUAEgATwACAAYAAAAUAEkATwACAAYAAAAUAEoATwACAAYAAAAUAEsATwACAAYAAAAUAEwATwACAAYAAAAUAE0ATwACAAYAAAAUAE4ATwACAAYAAAAUAE8ATwACAAYAAAAUAFAATwACAAYAAAAUAFEATwACAAYAAAAUAFIATwACAAYAAAAUAFMATwACAAYAAAAVACoATwADAAYAAAAVACsATwADAAYAAAAVACwATwADAAYAAAAVAC0ATwADAAYAAAAVAC4ATwADAAYAAAAVAC8ATwADAAYAAAAVADAATwADAAYAAAAVADEATwADAAYAAAAVADIATwADAAYAAAAVADMATwADAAYAAAAVADQATwADAAYAAAAVADUATwADAAYAAAAVADYATwADAAYAAAAVADcATwADAAYAAAAVADgATwADAAYAAAAVADkATwADAAYAAAAVADoATwADAAYAAAAVADsATwADAAYAAAAVADwATwADAAYAAAAVAD0ATwADAAYAAAAVAD4ATwADAAYAAAAVAD8ATwADAAYAAAAVAEAATwADAAYAAAAVAEEATwADAAYAAAAVAEIATwADAAYAAAAVAEMATwADAAYAAAAVAEQATwADAAYAAAAVAEUATwADAAYAAAAVAEYATwADAAYAAAAVAEcATwADAAYAAAAVAEgATwADAAYAAAAVAEkATwADAAYAAAAVAEoATwADAAYAAAAVAEsATwADAAYAAAAVAEwATwADAAYAAAAVAE0ATwADAAYAAAAVAE4ATwADAAYAAAAVAE8ATwADAAYAAAAVAFAATwADAAYAAAAVAFEATwADAAYAAAAVAFIATwADAAYAAAAVAFMATwADAAYAAAAWACoATwACAAYAAAAWACsATwACAAYAAAAWACwATwACAAYAAAAWAC0ATwACAAYAAAAWAC4ATwACAAYAAAAWAC8ATwACAAYAAAAWADAATwACAAYAAAAWADEATwACAAYAAAAWADIATwACAAYAAAAWADMATwACAAYAAAAWADQATwACAAYAAAAWADUATwACAAYAAAAWADYATwACAAYAAAAWADcATwACAAYAAAAWADgATwACAAYAAAAWADkATwACAAYAAAAWADoATwACAAYAAAAWADsATwACAAYAAAAWADwATwACAAYAAAAWAD0ATwACAAYAAAAWAD4ATwACAAYAAAAWAD8ATwACAAYAAAAWAEAATwACAAYAAAAWAEEATwACAAYAAAAWAEIATwACAAYAAAAWAEMATwACAAYAAAAWAEQATwACAAYAAAAWAEUATwACAAYAAAAWAEYATwACAAYAAAAWAEcATwACAAYAAAAWAEgATwACAAYAAAAWAEkATwACAAYAAAAWAEoATwACAAYAAAAWAEsATwACAAYAAAAWAEwATwACAAYAAAAWAE0ATwACAAYAAAAWAE4ATwACAAYAAAAWAE8ATwACAAYAAAAWAFAATwACAAYAAAAWAFEATwACAAYAAAAWAFIATwACAAYAAAAWAFMATwACAAYAAAAXACoATwADAAYAAAAXACsATwADAAYAAAAXACwATwADAAYAAAAXAC0ATwADAAYAAAAXAC4ATwADAAYAAAAXAC8ATwADAAYAAAAXADAATwADAAYAAAAXADEATwADAAYAAAAXADIATwADAAYAAAAXADMATwADAAYAAAAXADQATwADAAYAAAAXADUATwADAAYAAAAXADYATwADAAYAAAAXADcATwADAAYAAAAXADgATwADAAYAAAAXADkATwADAAYAAAAXADoATwADAAYAAAAXADsATwADAAYAAAAXADwATwADAAYAAAAXAD0ATwADAAYAAAAXAD4ATwADAAYAAAAXAD8ATwADAAYAAAAXAEAATwADAAYAAAAXAEEATwADAAYAAAAXAEIATwADAAYAAAAXAEMATwADAAYAAAAXAEQATwADAAYAAAAXAEUATwADAAYAAAAXAEYATwADAAYAAAAXAEcATwADAAYAAAAXAEgATwADAAYAAAAXAEkATwADAAYAAAAXAEoATwADAAYAAAAXAEsATwADAAYAAAAXAEwATwADAAYAAAAXAE0ATwADAAYAAAAXAE4ATwADAAYAAAAXAE8ATwADAAYAAAAXAFAATwADAAYAAAAXAFEATwADAAYAAAAXAFIATwADAAYAAAAXAFMATwADAAYAAAAYACoATwACAAYAAAAYACsATwACAAYAAAAYACwATwACAAYAAAAYAC0ATwACAAYAAAAYAC4ATwACAAYAAAAYAC8ATwACAAYAAAAYADAATwACAAYAAAAYADEATwACAAYAAAAYADIATwACAAYAAAAYADMATwACAAYAAAAYADQATwACAAYAAAAYADUATwACAAYAAAAYADYATwACAAYAAAAYADcATwACAAYAAAAYADgATwACAAYAAAAYADkATwACAAYAAAAYADoATwACAAYAAAAYADsATwACAAYAAAAYADwATwACAAYAAAAYAD0ATwACAAYAAAAYAD4ATwACAAYAAAAYAD8ATwACAAYAAAAYAEAATwACAAYAAAAYAEEATwACAAYAAAAYAEIATwACAAYAAAAYAEMATwACAAYAAAAYAEQATwACAAYAAAAYAEUATwACAAYAAAAYAEYATwACAAYAAAAYAEcATwACAAYAAAAYAEgATwACAAYAAAAYAEkATwACAAYAAAAYAEoATwACAAYAAAAYAEsATwACAAYAAAAYAEwATwACAAYAAAAYAE0ATwACAAYAAAAYAE4ATwACAAYAAAAYAE8ATwACAAYAAAAYAFAATwACAAYAAAAYAFEATwACAAYAAAAYAFIATwACAAYAAAAYAFMATwACAAYAAAAZACoATwADAAYAAAAZACsATwADAAYAAAAZACwATwADAAYAAAAZAC0ATwADAAYAAAAZAC4ATwADAAYAAAAZAC8ATwADAAYAAAAZADAATwADAAYAAAAZADEATwADAAYAAAAZADIATwADAAYAAAAZADMATwADAAYAAAAZADQATwADAAYAAAAZADUATwADAAYAAAAZADYATwADAAYAAAAZADcATwADAAYAAAAZADgATwADAAYAAAAZADkATwADAAYAAAAZADoATwADAAYAAAAZADsATwADAAYAAAAZADwATwADAAYAAAAZAD0ATwADAAYAAAAZAD4ATwADAAYAAAAZAD8ATwADAAYAAAAZAEAATwADAAYAAAAZAEEATwADAAYAAAAZAEIATwADAAYAAAAZAEMATwADAAYAAAAZAEQATwADAAYAAAAZAEUATwADAAYAAAAZAEYATwADAAYAAAAZAEcATwADAAYAAAAZAEgATwADAAYAAAAZAEkATwADAAYAAAAZAEoATwADAAYAAAAZAEsATwADAAYAAAAZAEwATwADAAYAAAAZAE0ATwADAAYAAAAZAE4ATwADAAYAAAAZAE8ATwADAAYAAAAZAFAATwADAAYAAAAZAFEATwADAAYAAAAZAFIATwADAAYAAAAZAFMATwADAAYAAAAUAFQATwACAAYAAAAUAFUATwACAAYAAAAVAFQATwACAAYAAAAVAFUATwACAAYAAAAWAFQATwACAAYAAAAWAFUATwACAAYAAAAUAFYATwACAAYAAAAUAFcATwACAAYAAAAUAFgATwACAAYAAAAUAFkATwACAAYAAAAUAFoATwACAAYAAAAUAFsATwACAAYAAAAUAFwATwACAAYAAAAVAFYATwACAAYAAAAVAFcATwACAAYAAAAVAFgATwACAAYAAAAVAFkATwACAAYAAAAVAFoATwACAAYAAAAVAFsATwACAAYAAAAVAFwATwACAAYAAAAWAFYATwACAAYAAAAWAFcATwACAAYAAAAWAFgATwACAAYAAAAWAFkATwACAAYAAAAWAFoATwACAAYAAAAWAFsATwACAAYAAAAWAFwATwACAAYAAAAUAGAATwACAAYAAAAVAGAATwACAAYAAAAVAGEATwACAAYAAAAWAGEATwACAAYAAAAUAGEATwACAAYAAAAWAGAATwACAAYAAAAUAF0ATwACAAYAAAAUAF4ATwACAAYAAAAUAF8ATwACAAYAAAAVAF8ATwACAAYAAAAVAF4ATwACAAYAAAAVAF0ATwACAAYAAAAWAF8ATwACAAYAAAAWAF4ATwACAAYAAAAWAF0ATwACAAYAAAAXAFQATwACAAYAAAAXAFUATwACAAYAAAAXAFYATwACAAYAAAAXAFcATwACAAYAAAAXAFgATwACAAYAAAAXAFkATwACAAYAAAAXAFoATwACAAYAAAAXAFsATwACAAYAAAAXAFwATwACAAYAAAAXAF0ATwACAAYAAAAXAF4ATwACAAYAAAAXAF8ATwACAAYAAAAXAGAATwACAAYAAAAXAGEATwACAAYAAAAYAFQATwACAAYAAAAYAFUATwACAAYAAAAYAFYATwACAAYAAAAYAFcATwACAAYAAAAYAFgATwACAAYAAAAYAFkATwACAAYAAAAYAFoATwACAAYAAAAYAFsATwACAAYAAAAYAFwATwACAAYAAAAYAF0ATwACAAYAAAAYAF4ATwACAAYAAAAYAF8ATwACAAYAAAAYAGAATwACAAYAAAAYAGEATwACAAYAAAAZAFQATwACAAYAAAAZAFUATwACAAYAAAAZAFYATwACAAYAAAAZAFcATwACAAYAAAAZAFgATwACAAYAAAAZAFkATwACAAYAAAAZAFoATwACAAYAAAAZAFsATwACAAYAAAAZAFwATwACAAYAAAAZAF0ATwACAAYAAAAZAF4ATwACAAYAAAAZAF8ATwACAAYAAAAZAGAATwACAAYAAAAZAGEATwACAAYAAAAaAFcATwACAAYAAAAaAFgATwACAAYAAAAaAFkATwACAAYAAAAaAFoATwACAAYAAAAaAFsATwACAAYAAAAaAFwATwACAAYAAAAaAF0ATwACAAYAAAAaAF4ATwACAAYAAAAbAFcATwACAAYAAAAbAFgATwACAAYAAAAbAFkATwACAAYAAAAbAFoATwACAAYAAAAbAFsATwACAAYAAAAbAFwATwACAAYAAAAbAF0ATwACAAYAAAAbAF4ATwACAAYAAAAcAFcATwACAAYAAAAcAFgATwACAAYAAAAcAFkATwACAAYAAAAcAFoATwACAAYAAAAcAFsATwACAAYAAAAcAFwATwACAAYAAAAcAF0ATwACAAYAAAAcAF4ATwACAAYAAAAdAFcATwACAAYAAAAdAFgATwACAAYAAAAdAFkATwACAAYAAAAdAFoATwACAAYAAAAdAFsATwACAAYAAAAdAFwATwACAAYAAAAdAF0ATwACAAYAAAAdAF4ATwACAAYAAAARAFcATwACAAYAAAARAFgATwACAAYAAAARAFkATwACAAYAAAARAFoATwACAAYAAAARAFsATwACAAYAAAARAFwATwACAAYAAAARAF0ATwACAAYAAAARAF4ATwACAAYAAAASAFcATwACAAYAAAASAFgATwACAAYAAAASAFkATwACAAYAAAASAFoATwACAAYAAAASAFsATwACAAYAAAASAFwATwACAAYAAAASAF0ATwACAAYAAAASAF4ATwACAAYAAAATAFcATwACAAYAAAATAFgATwACAAYAAAATAFkATwACAAYAAAATAFoATwACAAYAAAATAFsATwACAAYAAAATAFwATwACAAYAAAATAF0ATwACAAYAAAAQAFcATwACAAYAAAAQAFgATwACAAYAAAAQAFkATwACAAYAAAAQAFoATwACAAYAAAAQAFsATwACAAYAAAAQAFwATwACAAYAAAAQAF0ATwACAAYAAAAQAF4ATwACAAYAAAATAF4ATwACAAYAAAARAF8ATwACAAYAAAASAF8ATwACAAYAAAATAF8ATwACAAYAAAAaAF8ATwACAAYAAAAbAF8ATwACAAYAAAAcAF8ATwACAAYAAAAaAGAATwACAAYAAAAbAGAATwACAAYAAAAaAGEATwACAAYAAAASAGAATwACAAYAAAATAGAATwACAAYAAAATAGEATwACAAYAAAAaAFYATwACAAYAAAAbAFYATwACAAYAAAAcAFYATwACAAYAAAAaAFUATwACAAYAAAAbAFUATwACAAYAAAAaAFQATwACAAYAAAATAFYATwACAAYAAAASAFYATwACAAYAAAARAFYATwACAAYAAAASAFUATwACAAYAAAATAFUATwACAAYAAAATAFQATwACAAYAAAA=")
tile_set = ExtResource("1_af7nr")

[node name="ColorRect" type="ColorRect" parent="Node2D/ground"]
material = SubResource("ShaderMaterial_lwisy")
offset_left = 225.0
offset_top = -50.0
offset_right = 515.0
offset_bottom = 1579.0

[node name="ColorRect" type="ColorRect" parent="Node2D"]
material = SubResource("ShaderMaterial_8e7qo")
offset_left = 348.0
offset_top = 1.0
offset_right = 387.0
offset_bottom = 1344.0

[node name="door n walls n candles" type="TileMapLayer" parent="Node2D"]
texture_filter = 1
tile_map_data = PackedByteArray("AAAWAP3/CgACAAEAAAAWAP7/CgACAAIAAAAWAP//CgACAAMAAAAXAP3/CgADAAEAAAAXAP7/CgADAAIAAAAXAP//CgADAAMAAAAUAAAAVgAOABAAAAAUAAIAVgAPABAAAAAUAAQAVgAOABAAAAAUAAYAVgAPABAAAAAUAAgAVgARABAAAAAUAAoAVgAQABAAAAAUAAwAVgAPABAAAAAUAA4AVgAQABAAAAAUABAAVgAPABAAAAAZAAAAVgARABAAAAAZAAIAVgAQABAAAAAZAAQAVgAPABAAAAAZAAYAVgAQABAAAAAZAAgAVgARABAAAAAZAAoAVgAOABAAAAAZAAwAVgAPABAAAAAZAA4AVgARABAAAAAZABAAVgAOABAAAAAZABIAVgAOABAAAAAUABIAVgAQABAAAAAUABQAVgAPABAAAAAZABQAVgARABAAAAAZABYAVgAPABAAAAAUABYAVgAQABAAAAAUABgAVgARABAAAAAZABgAVgAPABAAAAAZABoAVgARABAAAAAUABoAVgAOABAAAAAUABwAVgAOABAAAAAZABwAVgAPABAAAAAUAB4AVgAPABAAAAAZAB4AVgAOABAAAAAZACAAVgARABAAAAAUACAAVgAOABAAAAAUACIAVgARABAAAAAZACIAVgAQABAAAAAZACQAVgARABAAAAAUACQAVgAOABAAAAAUACYAVgAPABAAAAAZACYAVgAPABAAAAAZACgAVgAOABAAAAAUACgAVgAQABAAAAAUACoAVgAOABAAAAAUACwAVgAPABAAAAAUAC4AVgAOABAAAAAUADAAVgAPABAAAAAUADIAVgARABAAAAAUADQAVgAQABAAAAAUADYAVgAPABAAAAAUADgAVgAQABAAAAAUADoAVgAPABAAAAAUADwAVgAQABAAAAAUAD4AVgAPABAAAAAUAEAAVgAQABAAAAAUAEIAVgARABAAAAAUAEQAVgAOABAAAAAUAEYAVgAOABAAAAAUAEgAVgAPABAAAAAUAEoAVgAOABAAAAAUAEwAVgARABAAAAAUAE4AVgAOABAAAAAUAFAAVgAPABAAAAAUAFIAVgAQABAAAAAZACoAVgARABAAAAAZACwAVgAQABAAAAAZAC4AVgAPABAAAAAZADAAVgAQABAAAAAZADIAVgARABAAAAAZADQAVgAOABAAAAAZADYAVgAPABAAAAAZADgAVgARABAAAAAZADoAVgAOABAAAAAZADwAVgAOABAAAAAZAD4AVgARABAAAAAZAEAAVgAPABAAAAAZAEIAVgAPABAAAAAZAEQAVgARABAAAAAZAEYAVgAPABAAAAAZAEgAVgAOABAAAAAZAEoAVgARABAAAAAZAEwAVgAQABAAAAAZAE4AVgARABAAAAAZAFAAVgAPABAAAAAZAFIAVgAOABAAAAARAFsAVgAUABAAAAAbAFYAVgAhAA4AAAAcAFcAVgAiABAAAAASAFYAVgAQABAAAAARAFcAVgAnABAAAAAQAF0AVgAcABAAAAASAF4AVgAhAAwAAAAbAF0AVgAnAAwAAAAdAFsAVgAnAA4AAAAcAFkAVgARABAAAAAUAFUAVgAhAAwAAAAQAFkAVgAOABAAAAAUAFMAVgAjAAkAAAAUAFQAVgAjAAoAAAAVAFMAVgAkAAkAAAAVAFQAVgAkAAoAAAAYAFMAVgAiAAkAAAAYAFQAVgAiAAoAAAAZAFMAVgAjAAkAAAAZAFQAVgAjAAoAAAAWAFQAVgAaAA4AAAAXAFQAVgAbAA4AAAAWAFcAUgAHAAcAAAAWAFgAUgAHAAgAAAAWAFkAUgAHAAkAAAAXAFcAUgAIAAcAAAAXAFgAUgAIAAgAAAAXAFkAUgAIAAkAAAAdAFcAUQAAAAoAAAAdAFgAUQAAAAsAAAASAF8AUQAAAAoAAAASAGAAUQAAAAsAAAAbAGAAUwACAAMAAAA=")
tile_set = ExtResource("1_af7nr")

[node name="Polygon2D" type="Polygon2D" parent="Node2D/door n walls n candles"]
material = SubResource("ShaderMaterial_a4imh")
position = Vector2(-2, 12)
polygon = PackedVector2Array(310, 1459, 307, 1471, 308, 1497, 319, 1522, 342, 1535, 372, 1542, 399, 1535, 416, 1523, 424, 1508, 430, 1494, 430.29, 1486.46, 431, 1468, 428, 1453, 419, 1443, 414, 1436, 401, 1432, 411, 1445, 413, 1466, 405, 1491, 394, 1503, 370, 1510, 346, 1507, 330, 1491, 325, 1464, 331, 1445, 338, 1434, 324, 1440, 315, 1448)
uv = PackedVector2Array(314, 1443, 307, 1471, 308, 1497, 321, 1522, 364, 1542, 399, 1535, 416, 1523, 424, 1508, 433, 1481, 431, 1452, 423, 1440, 406, 1434, 413, 1466, 405, 1491, 394, 1503, 370, 1510, 346, 1507, 330, 1491, 328, 1464, 335, 1441, 338, 1434, 324, 1440, 314, 1447)

[node name="Player" parent="." instance=ExtResource("3_wkhqo")]
position = Vector2(351, -29)
attackScene = null
metadata/_edit_lock_ = true

[node name="GPUParticles2D3" type="GPUParticles2D" parent="."]
material = SubResource("CanvasItemMaterial_wkhqo")
position = Vector2(1006, 1103)
scale = Vector2(0.64, 0.64)
amount = 2033
texture = ExtResource("1_lwisy")
lifetime = 6.0
randomness = 0.45
collision_base_size = 0.32
visibility_rect = Rect2(-1250, -1500, 500, 500)
process_material = SubResource("ParticleProcessMaterial_a4imh")
metadata/_edit_lock_ = true

[node name="to_village_3" type="Area2D" parent="."]
script = ExtResource("4_2rpj3")

[node name="CollisionShape2D" type="CollisionShape2D" parent="to_village_3"]
position = Vector2(368, -31)
shape = SubResource("RectangleShape2D_wkhqo")

[node name="cat" type="Sprite2D" parent="."]
texture_filter = 1
position = Vector2(368, 1522)
scale = Vector2(0.35119, 0.35119)
texture = ExtResource("6_rf67q")
